{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","state","text","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","props","onSubmit","id","shortid","generate","complete","autocomplete","this","onChange","onClick","React","Component","style","height","display","justifyContent","padding","textDecoration","todo","toggleComplete","width","onDelete","TodoList","todos","addTodo","handleComplete","map","handleDeleteTodo","filter","Todo","key","App","className","borderStyle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTAGqBA,E,4MAEjBC,MAAQ,CACJC,KAAK,I,EAGTC,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,S,EAI1CC,aAAe,SAACL,GACZA,EAAMM,iBACN,EAAKC,MAAMC,SAAS,CAChBC,GAAIC,IAAQC,WACZb,KAAM,EAAKD,MAAMC,KACjBc,UAAU,IAEd,EAAKX,SAAS,CACVH,KAAM,M,uDAKV,OACI,0BAAMe,aAAa,MAAML,SAAUM,KAAKT,cACpC,2BACIF,KAAK,OACLC,MAAOU,KAAKjB,MAAMC,KAClBiB,SAAUD,KAAKf,eAEnB,4BAAQiB,QAASF,KAAKT,cAAtB,Y,GAhCsBY,IAAMC,WCD7B,WAACX,GAAD,OACX,6BACI,yBAAKY,MAAO,CAAEC,OAAQ,SAAtB,KACA,yBAAKD,MAAO,CAAEE,QAAS,OAAQC,eAAe,SAAWC,QAAS,QAC9D,yBACIJ,MAAO,CAAEK,eAAgBjB,EAAMkB,KAAKb,SAAW,eAAiB,IAChEI,QAAST,EAAMmB,gBACdnB,EAAMkB,KAAK3B,MAEhB,yBAAKqB,MAAO,CAAEQ,MAAO,SAArB,KACA,4BAAQX,QAAST,EAAMqB,UAAvB,QCRSC,E,4MAEjBhC,MAAQ,CACJiC,MAAO,I,EAGXC,QAAU,SAACN,GACP,EAAKxB,SAAS,CACV6B,MAAM,CAAEL,GAAH,mBAAY,EAAK5B,MAAMiC,W,EAIpCE,eAAiB,SAACvB,GACd,EAAKR,SAAS,CACV6B,MAAO,EAAKjC,MAAMiC,MAAMG,KAAI,SAAAR,GACxB,OAAIA,EAAKhB,KAAOA,EACL,2BACAgB,GADP,IAEIb,UAAWa,EAAKb,WAGba,Q,EAMvBS,iBAAmB,SAACzB,GAChB,EAAKR,SAAS,CACV6B,MAAO,EAAKjC,MAAMiC,MAAMK,QAAO,SAAAV,GAAI,OAAIA,EAAKhB,KAAOA,Q,uDAIjD,IAAD,OACL,OAAO,6BACH,kBAAC,EAAD,CAAUD,SAAUM,KAAKiB,UACxBjB,KAAKjB,MAAMiC,MAAMG,KAAI,SAAAR,GAAI,OACtB,kBAACW,EAAD,CACIC,IAAKZ,EAAKhB,GACViB,eAAgB,kBAAM,EAAKM,eAAeP,EAAKhB,KAC/CmB,SAAU,kBAAM,EAAKM,iBAAiBT,EAAKhB,KAC3CgB,KAAMA,Y,GAzCYR,IAAMC,WCgB7BoB,E,uKAdX,OACE,yBAAKC,UAAU,OACb,yBAAKpB,MAAO,CAAEqB,YAAa,QAASpB,OAAQ,UAC1C,6BACE,2CAEF,yBAAKD,MAAO,CAAEC,OAAQ,SAAtB,KACA,kBAAC,EAAD,Y,GATQF,aCQEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.75ff059f.chunk.js","sourcesContent":["import React from 'react'\r\nimport shortid from 'shortid'\r\n\r\nexport default class TodoForm extends React.Component {\r\n\r\n    state = {\r\n        text: ``\r\n    };\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.onSubmit({\r\n            id: shortid.generate(),\r\n            text: this.state.text,\r\n            complete: false\r\n        });\r\n        this.setState({\r\n            text: \"\"\r\n        })\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <form autocomplete=\"off\" onSubmit={this.handleSubmit}>\r\n                <input\r\n                    name=\"text\"\r\n                    value={this.state.text}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <button onClick={this.handleSubmit}>Add</button>\r\n            </form>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default (props) => (\r\n    <div>\r\n        <div style={{ height: \"10px\" }}> </div>\r\n        <div style={{ display: \"flex\", justifyContent: `center`, padding: \"5px\" }}>\r\n            <div\r\n                style={{ textDecoration: props.todo.complete ? 'line-through' : '' }}\r\n                onClick={props.toggleComplete}>\r\n                {props.todo.text}\r\n            </div>\r\n            <div style={{ width: \"20px\" }}> </div>\r\n            <button onClick={props.onDelete}>X</button>\r\n        </div>\r\n    </div>\r\n)","import React from 'react'\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nexport default class TodoList extends React.Component {\r\n\r\n    state = {\r\n        todos: []\r\n    };\r\n\r\n    addTodo = (todo) => {\r\n        this.setState({\r\n            todos: [todo, ...this.state.todos]\r\n        })\r\n    }\r\n\r\n    handleComplete = (id) => {\r\n        this.setState({\r\n            todos: this.state.todos.map(todo => {\r\n                if (todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        complete: !todo.complete\r\n                    };\r\n                } else {\r\n                    return todo;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    handleDeleteTodo = (id) => {\r\n        this.setState({\r\n            todos: this.state.todos.filter(todo => todo.id !== id)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <TodoForm onSubmit={this.addTodo} />\r\n            {this.state.todos.map(todo => (\r\n                <Todo\r\n                    key={todo.id}\r\n                    toggleComplete={() => this.handleComplete(todo.id)}\r\n                    onDelete={() => this.handleDeleteTodo(todo.id)}\r\n                    todo={todo}\r\n                />\r\n            ))}\r\n        </div>\r\n    }\r\n}","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport TodoList from \"./components/TodoList\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div style={{ borderStyle: \"solid\", height: \"100vh\" }}>\n          <div>\n            <h1>TO DO LIST</h1>\n          </div>\n          <div style={{ height: \"20px\" }}> </div>\n          <TodoList />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}